
import type { LucideIcon } from 'lucide-react';

export type NavItem = {
  title: string;
  href: string;
  icon: LucideIcon;
  label?: string;
  disabled?: boolean;
  external?: boolean;
};

export const MUSCLE_GROUPS = [
  "Chest", "Back", "Legs", "Shoulders", "Biceps", "Triceps", "Abs", "Cardio", "Other"
] as const;

export type MuscleGroup = typeof MUSCLE_GROUPS[number];

export interface Exercise {
  id: string; // Firestore document ID
  name: string;
  muscleGroup: MuscleGroup;
  targetNotes?: string;
  exerciseSetup?: string; // New field for machine settings, etc.
  instructions?: string; // Kept for potential future use
  dataAiHint?: string;
}

export type ExerciseData = Omit<Exercise, 'id'>;


// Represents an exercise within a routine, can hold specific details like sets, reps
export interface RoutineExercise extends Exercise {
  // For future use:
  // sets?: number;
  // reps?: string; // e.g., "8-12" or "AMRAP"
  // restTime?: string; // e.g., "60s"
  // order?: number; // To maintain order in the routine
}

export interface Routine {
  id: string; // Firestore document ID
  name: string;
  description?: string;
  exercises: RoutineExercise[]; // Array of selected exercises (or their IDs/references)
  // For future use:
  // createdBy: string; // User ID
  // createdAt: Date; // Timestamp
  // updatedAt: Date;
}

// Used for creating/updating routines, ID is generated by Firestore or already exists
export type RoutineData = Omit<Routine, 'id'>;


export interface LoggedSet {
  reps: number;
  weight: number;
}

export interface LoggedExercise {
  exerciseId: string;
  exerciseName: string;
  sets: LoggedSet[];
}

export interface WorkoutLog {
  id: string;
  date: string; 
  routineId?: string; 
  routineName?: string;
  exercises: LoggedExercise[];
  duration?: number; 
  notes?: string;
}

export interface UserProfile {
  id: string;
  email?: string | null;
  name?: string | null;
  avatarUrl?: string | null;
}
